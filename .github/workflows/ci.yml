name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Run linter
      run: flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests
      run: pytest --cov=app --cov-report=xml
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
      continue-on-error: true

    - name: Upload artifact for deployment jobs
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: .

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != ''

    # Option: Log in to GitHub Container Registry
    # - name: Log in to GitHub Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/easybuydubai-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/easybuydubai-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/easybuydubai-backend:buildcache,mode=max
      if: secrets.DOCKER_USERNAME != ''

  deploy-staging:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment commands here

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    # Option 0: Deploy to Azure App Service (RECOMMENDED for your setup)
    # To enable automatic deployment:
    # 1. Get publish profile: Azure Portal → App Service → Download publish profile
    # 2. Add as GitHub secret: AZURE_WEBAPP_PUBLISH_PROFILE
    # 3. Uncomment the lines below
    #
    # - name: Download artifact from build job
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: python-app
    #
    # - name: Deploy to Azure Web App
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: 'easybuydubaibackend'
    #     publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    # Option 1: Deploy to AWS ECS
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    #
    # - name: Deploy to ECS
    #   run: |
    #     aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
    #       --service ${{ secrets.ECS_SERVICE }} \
    #       --force-new-deployment

    # Option 2: Deploy to Railway
    # - name: Deploy to Railway
    #   uses: bervProject/railway-deploy@main
    #   with:
    #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
    #     service: backend

    # Option 3: Deploy to DigitalOcean App Platform
    # - name: Deploy to DigitalOcean
    #   uses: digitalocean/app_action@main
    #   with:
    #     app_name: easybuydubai-backend
    #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    # Option 4: Deploy via SSH
    # - name: Deploy via SSH
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSH_HOST }}
    #     username: ${{ secrets.SSH_USERNAME }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       cd /app/easybuydubai-backend
    #       docker-compose pull
    #       docker-compose up -d

    - name: Deployment placeholder
      run: echo "Uncomment and configure your deployment method above"
